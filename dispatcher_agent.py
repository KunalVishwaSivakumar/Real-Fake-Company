from crewai import Agent, Task, Crew
from crewai.tools import BaseTool
from dotenv import load_dotenv
import os

load_dotenv()

# --- Read output from ScannerAgent ---
with open("scanner_results.txt", "r") as f:
    raw_issues = f.read()

# --- Dispatcher Logic ---
class DispatcherLogic:
    def __init__(self, issues_str: str):
        self.issues = self._split_issues(issues_str)
        self.routes = []

    def _split_issues(self, text: str):
        # Split based on type tags while preserving the tag
        parts = text.split('[')
        tagged = [f"[{p.strip()}" for p in parts if p.strip()]
        return tagged

    def route_issues(self):
        for issue in self.issues:
            if "[type_delay]" in issue:
                self.routes.append(f"Route [type_delay] to SchedulerAgent:\n{issue}")
            elif "[type_safety]" in issue:
                self.routes.append(f"Route [type_safety] to SafetyAgent:\n{issue}")
            elif "[type_inspection]" in issue:
                self.routes.append(f"Route [type_inspection] to QAQCAgent:\n{issue}")
        return "\n\n".join(self.routes)

# --- DispatcherTool using BaseTool ---
class DispatcherTool(BaseTool):
    name: str = "DispatchProjectIssues"
    description: str = "Routes tagged issues to the appropriate agents based on issue type."

    def _run(self, **kwargs) -> str:
        dispatcher = DispatcherLogic(raw_issues)
        return dispatcher.route_issues()

# --- DispatcherAgent ---
dispatcher_agent = Agent(
    role="Dispatcher",
    goal="Route issues to the correct agent based on their type.",
    backstory="You are the issue triage lead. Your job is to route issues detected in the project to the appropriate department.",
    tools=[DispatcherTool()],
    verbose=True
)

# --- DispatcherTask ---
dispatcher_task = Task(
    description="Use the tool to route project issues to the correct agent based on the type.",
    expected_output="A routing list generated by the DispatcherTool.",
    agent=dispatcher_agent,
    tool_choice="auto"  # <- ensure the agent uses the tool
)

# --- Crew Execution ---
crew = Crew(
    agents=[dispatcher_agent],
    tasks=[dispatcher_task],
    verbose=True
)

results = crew.kickoff()

# Save dispatcher output to file for downstream agents
with open("dispatcher_results.json", "w") as f:
    f.write(str(results))

print("\n--- Dispatcher Output ---\n")
for line in str(results).split("\n"):
    print(line)
